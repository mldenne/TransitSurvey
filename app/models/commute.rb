class Commute < ApplicationRecord

  # Cost calculations are hard-coded into the method, see method below. To find the most recent IRS Standard Mileage Rate for Business, go to https://www.irs.gov/uac/newsroom/2016-standard-mileage-rates-for-business-medical-and-moving-announcedIRS.
  # Transit comparative cost is hard-coded into the method, see method below. To calculate new data, go to https://www.transit.dot.gov/ntd and download the latest NTD Data/NTD Data Reports

  # points are defined as polylines along the route generated by Google Maps, each point has it's own latitude and longitude
  has_many    :points, dependent: :destroy

  # origin is the origin address for the traveler (home), destination is the work address. Addresses cannot be any further than 65 miles from the center of Indianapolis (latitude and longitude calculated by Google Maps)
  validates   :origin, presence: true
  validates   :destination, presence: true
  validate    :origin_cannot_be_outside_indianapolis,
              :destination_cannot_be_outside_indianapolis, on: :create

# all methods listed below are created in the model and saved in the database.
  before_save :save_distance_per_day,
              :save_distance_per_week,
              :save_drive_minutes_per_week,
              :save_drive_hours_per_week,
              :save_drive_days_per_year,
              :save_drive_cost_per_week,
              :save_drive_cost_per_year

# see Geokit-rails gem for details on acts_as_mappable
  acts_as_mappable :auto_geocode=>{:field=>:origin, :error_message=>'Could not geocode address'}

# validates that origin address is no further than 65 miles from the center of Indianapolis
  def origin_cannot_be_outside_indianapolis
    indy_location = Geokit::Geocoders::GoogleGeocoder.geocode('Indianapolis, IN')
    origin_location = Geokit::Geocoders::GoogleGeocoder.geocode(self.origin)
    if indy_location.distance_to(origin_location) > 65
      errors.add(:origin, "Origin cannot be more than 65 miles outside of Indianapolis")
    end
  end

# validates that destination address is no further than 65 miles from the center of Indianapolis
  def destination_cannot_be_outside_indianapolis
    indy_location = Geokit::Geocoders::GoogleGeocoder.geocode('Indianapolis, IN')
    destination_location = Geokit::Geocoders::GoogleGeocoder.geocode(self.destination)
    if indy_location.distance_to(destination_location) > 65
      errors.add(:destination, "Destination cannot be more than 65 miles outside of Indianapolis")
    end
  end

# distance_per_day is the round trip miles traveled
  def save_distance_per_day
    self.distance_per_day = distance_in_miles * 2
  end

# distance_per_week is the total miles traveled in a 5 day period
  def save_distance_per_week
    self.distance_per_week = distance_per_day * 5
  end

# drive_time_in_minutes is a Google calculation, calculated for 10 one-way commutes
  def save_drive_minutes_per_week
    self.drive_minutes_per_week = drive_time_in_minutes * 10
  end

# drive_hours_per_week formats the time driven into hours
  def save_drive_hours_per_week
    self.drive_hours_per_week = (drive_minutes_per_week / 60.0).round(2)
  end

# drive_days_per_year formate the time driven into days given 50 work-weeks
  def save_drive_days_per_year
    self.drive_days_per_year = ((drive_hours_per_week * 50) / 24.0).round(2)
  end

# hard-coded IRS Standard Mileage Rate for Business
  def irs_standard_mileage_rate
    0.54
  end

# drive_cost_per_week based on IRS rates and total distance traveled per week
  def save_drive_cost_per_week
    self.drive_cost_per_week = (distance_per_week * irs_standard_mileage_rate).round
  end

# drive_cost_per_week based on IRS rates and 50 work-weeks
  def save_drive_cost_per_year
    self.drive_cost_per_year = (drive_cost_per_week * 50).round
  end

# number_of_closest_commuters is calculated using the Geokit-rails gem and using a 5 mile radius based on the origin address
  def number_of_closest_commuters
    Commute.within(5, :origin => self.origin).count
  end

# average_distance_traveled_of_closest_commuters is calcuated using the Geokit-rails gem to find the distance_in_miles per one-way commute of closest commuters
  def average_distance_traveled_of_closest_commuters
    Commute.within(5, :origin => self.origin).average(:distance_in_miles).round.to_s
  end

# hard-coded NTD Transit Data for average US Transit Cost
  def national_average_transit_cost
    (2.342876994).round(2)
  end

# transit_cost_per_week is based on 10 one-way commutes
  def transit_cost_per_week
    (national_average_transit_cost * 10).round
  end

# transit_cost_per_year is based on 50 work-weeks
  def transit_cost_per_year
    (transit_cost_per_week * 50).round
  end

# savings_transit_cost_per_week takes the cost per week based on IRS estimates and subtracts the transit cost per week based on NTD Transit Data
  def savings_transit_cost_per_week
    self.drive_cost_per_week - transit_cost_per_week
  end

# Same as above only calculated based on 50 work-weeks
  def savings_transit_cost_per_year
    self.drive_cost_per_year - transit_cost_per_year
  end

end
